-- =====================================================
-- 1. TABEL USERS (metadata, tanpa password)
-- =====================================================
CREATE TABLE users (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY, -- internal ID
    auth_id UUID UNIQUE,                           -- ID dari Supabase Auth
    username VARCHAR(50) UNIQUE NOT NULL,
    nama_lengkap VARCHAR(100) NOT NULL,
    role VARCHAR(20) DEFAULT 'teacher' CHECK (role IN ('admin', 'teacher')),
    mapel VARCHAR(50),
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =====================================================
-- 2. TABEL MAPEL
-- =====================================================
CREATE TABLE mapel (
    id SERIAL PRIMARY KEY,
    nama_mapel VARCHAR(100) NOT NULL UNIQUE,
    kode_mapel VARCHAR(10),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =====================================================
-- 3. TABEL SISWA
-- =====================================================
CREATE TABLE siswa (
    id SERIAL PRIMARY KEY,
    nama VARCHAR(100) NOT NULL,
    kelas VARCHAR(10) NOT NULL,
    nis VARCHAR(20) UNIQUE,
    jenis_kelamin VARCHAR(10) CHECK (jenis_kelamin IN ('L', 'P')),
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =====================================================
-- 4. TABEL PRESENSI
-- =====================================================
CREATE TABLE presensi (
    id SERIAL PRIMARY KEY,
    siswa_id INTEGER NOT NULL REFERENCES siswa(id) ON DELETE CASCADE,
    tanggal DATE NOT NULL,
    mapel_id INTEGER NOT NULL REFERENCES mapel(id) ON DELETE CASCADE,
    guru_id UUID NOT NULL REFERENCES users(auth_id) ON DELETE CASCADE, -- gunakan auth_id
    status VARCHAR(20) DEFAULT 'Alpha' CHECK (status IN ('Hadir', 'Sakit', 'Ijin', 'Alpha', 'Dispen')),
    kelas VARCHAR(10) NOT NULL,
    keterangan TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    UNIQUE(siswa_id, tanggal, mapel_id, guru_id)
);

-- =====================================================
-- 5. TABEL JURNAL
-- =====================================================
CREATE TABLE jurnal (
    id SERIAL PRIMARY KEY,
    tanggal DATE NOT NULL,
    kelas VARCHAR(10) NOT NULL,
    mapel_id INTEGER NOT NULL REFERENCES mapel(id) ON DELETE CASCADE,
    jam_awal INTEGER NOT NULL CHECK (jam_awal >= 1 AND jam_awal <= 11),
    jam_akhir INTEGER NOT NULL CHECK (jam_akhir >= 1 AND jam_akhir <= 11),
    jumlah_hadir INTEGER DEFAULT 0 CHECK (jumlah_hadir >= 0),
    jumlah_tidak_hadir INTEGER DEFAULT 0 CHECK (jumlah_tidak_hadir >= 0),
    nama_tidak_hadir TEXT,
    kegiatan TEXT NOT NULL,
    materi TEXT,
    keterangan TEXT,
    guru_id UUID NOT NULL REFERENCES users(auth_id) ON DELETE CASCADE, -- gunakan auth_id
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    CHECK (jam_akhir >= jam_awal)
);

-- Aktifkan RLS
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE mapel ENABLE ROW LEVEL SECURITY;
ALTER TABLE siswa ENABLE ROW LEVEL SECURITY;
ALTER TABLE presensi ENABLE ROW LEVEL SECURITY;
ALTER TABLE jurnal ENABLE ROW LEVEL SECURITY;


-- Admin full access
CREATE POLICY admin_users_full
ON users
FOR ALL
USING (EXISTS (SELECT 1 WHERE auth.role() = 'admin'))
WITH CHECK (EXISTS (SELECT 1 WHERE auth.role() = 'admin'));

-- Guru hanya bisa lihat data sendiri
CREATE POLICY guru_users_select
ON users
FOR SELECT
USING (auth.uid() = auth_id);


-- Guru CRUD presensi sendiri
CREATE POLICY guru_presensi_crud
ON presensi
FOR ALL
USING (auth.uid() = guru_id)
WITH CHECK (auth.uid() = guru_id);

-- Admin full access
CREATE POLICY admin_presensi_full
ON presensi
FOR ALL
USING (auth.role() = 'admin')
WITH CHECK (auth.role() = 'admin');

-- Guru CRUD jurnal sendiri
CREATE POLICY guru_jurnal_crud
ON jurnal
FOR ALL
USING (auth.uid() = guru_id)
WITH CHECK (auth.uid() = guru_id);

-- Admin full access
CREATE POLICY admin_jurnal_full
ON jurnal
FOR ALL
USING (auth.role() = 'admin')
WITH CHECK (auth.role() = 'admin');


-- Semua user bisa SELECT
CREATE POLICY mapel_select_all
ON mapel
FOR SELECT
USING (true);

-- Admin INSERT
CREATE POLICY mapel_admin_insert
ON mapel
FOR INSERT
WITH CHECK (auth.role() = 'admin');

-- Admin UPDATE
CREATE POLICY mapel_admin_update
ON mapel
FOR UPDATE
USING (auth.role() = 'admin')
WITH CHECK (auth.role() = 'admin');

-- Admin DELETE
CREATE POLICY mapel_admin_delete
ON mapel
FOR DELETE
USING (auth.role() = 'admin');


-- Semua user bisa SELECT
CREATE POLICY siswa_select_all
ON siswa
FOR SELECT
USING (true);

-- Admin INSERT
CREATE POLICY siswa_admin_insert
ON siswa
FOR INSERT
WITH CHECK (auth.role() = 'admin');

-- Admin UPDATE
CREATE POLICY siswa_admin_update
ON siswa
FOR UPDATE
USING (auth.role() = 'admin')
WITH CHECK (auth.role() = 'admin');

-- Admin DELETE
CREATE POLICY siswa_admin_delete
ON siswa
FOR DELETE
USING (auth.role() = 'admin');
