 <script>
        // Supabase Configuration
        const supabaseUrl = 'http://192.168.88.147:8000/';
        const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyAgCiAgICAicm9sZSI6ICJhbm9uIiwKICAgICJpc3MiOiAic3VwYWJhc2UtZGVtbyIsCiAgICAiaWF0IjogMTY0MTc2OTIwMCwKICAgICJleHAiOiAxNzk5NTM1NjAwCn0.dc_X5iR_VP_qT0zsiyj_I_OZ2T9FtRU2BBNWN8Bu4GE';
        const { createClient } = supabase;
        const supabaseClient = createClient(supabaseUrl, supabaseKey);

        // Data Storage
        let siswaData = [];
        let presensiData = [];
        let jurnalData = [];
        let currentUser = null;
        let mapelData = [];

        // Class options
        const kelasOptions = [
            'X-1', 'X-2', 'X-3', 'X-4', 'X-5', 'X-6', 'X-7', 'X-8', 'X-9',
            'XI-1', 'XI-2', 'XI-3', 'XI-4', 'XI-5', 'XI-6', 'XI-7', 'XI-8', 'XI-9',
            'XII-1', 'XII-2', 'XII-3', 'XII-4', 'XII-5', 'XII-6', 'XII-7', 'XII-8', 'XII-9'
        ];

        // Database Functions
        async function initializeDatabase() {
            try {
                console.log('Initializing database tables...');
                await createTablesIfNotExist();
                console.log('Database initialization completed');
                return true;
            } catch (error) {
                console.error('Database initialization failed:', error);
                throw error;
            }
        }

        async function createTablesIfNotExist() {
            try {
                // Test if tables exist by trying to query them
                const { data: testSiswa, error: siswaError } = await supabaseClient
                    .from('siswa')
                    .select('id')
                    .limit(1);
                
                const { data: testPresensi, error: presensiError } = await supabaseClient
                    .from('presensi')
                    .select('id')
                    .limit(1);
                
                const { data: testJurnal, error: jurnalError } = await supabaseClient
                    .from('jurnal')
                    .select('id')
                    .limit(1);
                
                const { data: testUsers, error: usersError } = await supabaseClient
                    .from('users')
                    .select('id')
                    .limit(1);
                
                const { data: testMapel, error: mapelError } = await supabaseClient
                    .from('mapel')
                    .select('id')
                    .limit(1);
                
                // Check for errors
                const errors = [siswaError, presensiError, jurnalError, usersError, mapelError];
                const hasError = errors.some(error => error);
                
                if (hasError) {
                    console.error('Database access errors:', errors);
                    throw new Error('Database tables are not accessible');
                }
                
                return true;
            } catch (error) {
                console.error('Error checking tables:', error);
                throw error;
            }
        }

        async function loadAllData() {
            try {
                // Load siswa data with new fields
                const { data: siswa, error: siswaError } = await supabaseClient
                    .from('siswa')
                    .select('*')
                    .order('nama');
                if (siswaError) throw siswaError;
                siswaData = siswa || [];

                // Load presensi data with guru filter
                let presensiQuery = supabaseClient
                    .from('presensi')
                    .select('*')
                    .order('tanggal', { ascending: false });
                
                if (currentUser && currentUser.role === 'teacher') {
                    presensiQuery = presensiQuery.eq('guru_id', currentUser.id);
                }
                
                const { data: presensi, error: presensiError } = await presensiQuery;
                if (presensiError) throw presensiError;
                presensiData = presensi || [];

                // Load jurnal data
                let jurnalQuery = supabaseClient
                    .from('jurnal')
                    .select('*')
                    .order('tanggal', { ascending: false });
                
                if (currentUser && currentUser.role === 'teacher') {
                    jurnalQuery = jurnalQuery.eq('guru_id', currentUser.id);
                }
                
                const { data: jurnal, error: jurnalError } = await jurnalQuery;
                if (jurnalError) throw jurnalError;
                jurnalData = jurnal || [];

                console.log('Data loaded successfully from database');
            } catch (error) {
                console.error('Error loading data:', error);
                throw error;
            }
        }

        async function authenticateUser(username, password) {
            try {
                console.log('Attempting to authenticate user:', username);
                
                // Try database authentication first
                const { data: users, error } = await supabaseClient
                    .from('users')
                    .select('id, username, nama_lengkap, role, mapel, is_active')
                    .eq('username', username)
                    .eq('password', password)
                    .eq('is_active', true)
                    .limit(1);
                
                if (error) {
                    console.log('Database authentication failed, using fallback:', error);
                    // Fallback to hardcoded users
                    const validUsers = [
                        {
                            id: 'admin-001',
                            username: 'admin',
                            password: 'admin123',
                            nama_lengkap: 'Administrator',
                            role: 'admin',
                            mapel: null,
                            is_active: true
                        },
                        {
                            id: 'guru-001',
                            username: 'guru1',
                            password: 'guru123',
                            nama_lengkap: 'Guru Matematika',
                            role: 'teacher',
                            mapel: 'Matematika',
                            is_active: true
                        },
                        {
                            id: 'guru-002',
                            username: 'guru2',
                            password: 'guru123',
                            nama_lengkap: 'Guru Bahasa Indonesia',
                            role: 'teacher',
                            mapel: 'Bahasa Indonesia',
                            is_active: true
                        }
                    ];
                    
                    const user = validUsers.find(u => 
                        u.username === username && 
                        u.password === password && 
                        u.is_active === true
                    );
                    
                    return user || null;
                }
                
                if (users && users.length > 0) {
                    console.log('Database authentication successful');
                    return users[0];
                }
                
                return null;
            } catch (error) {
                console.error('Error authenticating user:', error);
                // Fallback authentication
                const validUsers = [
                    {
                        id: 'admin-001',
                        username: 'admin',
                        password: 'admin123',
                        nama_lengkap: 'Administrator',
                        role: 'admin',
                        mapel: null,
                        is_active: true
                    },
                    {
                        id: 'guru-001',
                        username: 'guru1',
                        password: 'guru123',
                        nama_lengkap: 'Guru Matematika',
                        role: 'teacher',
                        mapel: 'Matematika',
                        is_active: true
                    },
                    {
                        id: 'guru-002',
                        username: 'guru2',
                        password: 'guru123',
                        nama_lengkap: 'Guru Bahasa Indonesia',
                        role: 'teacher',
                        mapel: 'Bahasa Indonesia',
                        is_active: true
                    }
                ];
                
                const user = validUsers.find(u => 
                    u.username === username && 
                    u.password === password && 
                    u.is_active === true
                );
                
                return user || null;
            }
        }

        async function saveSiswa(siswa) {
            try {
                const { data, error } = await supabaseClient
                    .from('siswa')
                    .insert([siswa])
                    .select();
                if (error) throw error;
                return data[0];
            } catch (error) {
                console.error('Error saving siswa:', error);
                throw error;
            }
        }

        async function updateSiswa(id, siswa) {
            try {
                const { data, error } = await supabaseClient
                    .from('siswa')
                    .update(siswa)
                    .eq('id', id)
                    .select();
                if (error) throw error;
                return data[0];
            } catch (error) {
                console.error('Error updating siswa:', error);
                throw error;
            }
        }

        async function deleteSiswa(id) {
            try {
                const { error } = await supabaseClient
                    .from('siswa')
                    .delete()
                    .eq('id', id);
                if (error) throw error;
            } catch (error) {
                console.error('Error deleting siswa:', error);
                throw error;
            }
        }

        async function savePresensi(presensi) {
            try {
                console.log('Attempting to save presensi:', presensi);
                
                const { data, error } = await supabaseClient
                    .from('presensi')
                    .upsert([presensi], {
                        onConflict: 'siswa_id,tanggal,mapel_id,guru_id',
                        ignoreDuplicates: false
                    })
                    .select();
                
                if (error) {
                    throw error;
                }
                
                console.log('Presensi saved successfully:', data);
                return data[0];
            } catch (error) {
                console.error('Error saving presensi:', error);
                throw error;
            }
        }

        async function saveJurnal(jurnal) {
            try {
                console.log('Attempting to save jurnal:', jurnal);
                
                const { data, error } = await supabaseClient
                    .from('jurnal')
                    .insert([jurnal])
                    .select();
                
                if (error) {
                    throw error;
                }
                
                console.log('Jurnal saved successfully:', data);
                return data[0];
            } catch (error) {
                console.error('Error saving jurnal:', error);
                throw error;
            }
        }

        async function updateJurnal(id, jurnal) {
            try {
                const { data, error } = await supabaseClient
                    .from('jurnal')
                    .update(jurnal)
                    .eq('id', id)
                    .select();
                if (error) throw error;
                return data[0];
            } catch (error) {
                console.error('Error updating jurnal:', error);
                throw error;
            }
        }

        async function deleteJurnal(id) {
            try {
                const { error } = await supabaseClient
                    .from('jurnal')
                    .delete()
                    .eq('id', id);
                if (error) throw error;
            } catch (error) {
                console.error('Error deleting jurnal:', error);
                throw error;
            }
        }

        // Load mapel options
        async function loadMapelOptions() {
            try {
                console.log('Loading mapel options from database...');
                
                await createDefaultMapelData();
                
                const { data: mapelList, error: mapelError } = await supabaseClient
                    .from('mapel')
                    .select('id, nama_mapel')
                    .order('nama_mapel');
                
                if (mapelError) {
                    console.error('Mapel query error:', mapelError);
                    console.log('Creating fallback mapel data...');
                    createFallbackMapelData();
                    return;
                }
                
                console.log('Mapel data loaded:', mapelList);
                mapelData = mapelList || [];

                if (mapelData.length === 0) {
                    console.warn('No mapel data returned from database, creating fallback data');
                    createFallbackMapelData();
                    return;
                }

                populateMapelDropdowns();
                console.log('Mapel options loaded successfully');
                showAlert(`${mapelData.length} mata pelajaran berhasil dimuat`, 'success');

            } catch (error) {
                console.error('Error loading mapel options:', error);
                console.log('Creating fallback mapel data due to error...');
                createFallbackMapelData();
            }
        }

        async function createDefaultMapelData() {
            try {
                const { data: existingMapel, error: checkError } = await supabaseClient
                    .from('mapel')
                    .select('id')
                    .limit(1);
                
                if (checkError) {
                    console.log('Mapel table might not exist or accessible:', checkError);
                    return;
                }
                
                if (!existingMapel || existingMapel.length === 0) {
                    console.log('Mapel table is empty, creating default data...');
                    
                    const defaultMapel = [
                        { nama_mapel: 'Matematika' },
                        { nama_mapel: 'Bahasa Indonesia' },
                        { nama_mapel: 'Bahasa Inggris' },
                        { nama_mapel: 'IPA' },
                        { nama_mapel: 'IPS' },
                        { nama_mapel: 'PKn' },
                        { nama_mapel: 'Seni Budaya' },
                        { nama_mapel: 'Pendidikan Jasmani' },
                        { nama_mapel: 'Prakarya' },
                        { nama_mapel: 'Agama' }
                    ];
                    
                    const { data: insertedMapel, error: insertError } = await supabaseClient
                        .from('mapel')
                        .insert(defaultMapel)
                        .select();
                    
                    if (insertError) {
                        console.error('Error inserting default mapel:', insertError);
                    } else {
                        console.log('Default mapel data created successfully:', insertedMapel);
                    }
                }
            } catch (error) {
                console.error('Error creating default mapel data:', error);
            }
        }

        function createFallbackMapelData() {
            console.log('Using fallback mapel data...');
            mapelData = [
                { id: 1, nama_mapel: 'Matematika' },
                { id: 2, nama_mapel: 'Bahasa Indonesia' },
                { id: 3, nama_mapel: 'Bahasa Inggris' },
                { id: 4, nama_mapel: 'IPA' },
                { id: 5, nama_mapel: 'IPS' },
                { id: 6, nama_mapel: 'PKn' },
                { id: 7, nama_mapel: 'Seni Budaya' },
                { id: 8, nama_mapel: 'Pendidikan Jasmani' },
                { id: 9, nama_mapel: 'Prakarya' },
                { id: 10, nama_mapel: 'Agama' }
            ];
            
            populateMapelDropdowns();
            showAlert(`${mapelData.length} mata pelajaran dimuat (mode offline)`, 'success');
        }

        function populateMapelDropdowns() {
            const mapelSelects = ['filterMapelPresensi', 'namaMapel', 'filterMapelJurnal', 'editNamaMapel'];
            mapelSelects.forEach(selectId => {
                const select = document.getElementById(selectId);
                if (select) {
                    console.log(`Populating dropdown: ${selectId} with ${mapelData.length} options`);
                    
                    const firstOption = select.querySelector('option');
                    const defaultText = firstOption ? firstOption.textContent : 'Pilih Mata Pelajaran';
                    const defaultValue = firstOption ? firstOption.value : '';
                    
                    select.innerHTML = '';
                    
                    const defaultOption = document.createElement('option');
                    defaultOption.value = defaultValue;
                    defaultOption.textContent = defaultText;
                    select.appendChild(defaultOption);
                    
                    mapelData.forEach(mapel => {
                        const option = document.createElement('option');
                        option.value = mapel.id;
                        option.textContent = mapel.nama_mapel;
                        select.appendChild(option);
                    });
                    console.log(`Successfully added ${mapelData.length} mapel options to ${selectId}`);
                } else {
                    console.error(`Dropdown element not found: ${selectId}`);
                }
            });
        }

        function populateKelasDropdowns() {
            const kelasSelects = ['kelasSiswa', 'editKelasSiswa', 'filterKelas', 'filterKelasDaftar', 'filterKelasRekap', 'filterKelasJurnal', 'editKelasJurnal'];
            
            kelasSelects.forEach(selectId => {
                const select = document.getElementById(selectId);
                if (select) {
                    const firstOption = select.querySelector('option');
                    const defaultText = firstOption ? firstOption.textContent : 'Pilih Kelas';
                    const defaultValue = firstOption ? firstOption.value : '';
                    
                    select.innerHTML = '';
                    
                    const defaultOption = document.createElement('option');
                    defaultOption.value = defaultValue;
                    defaultOption.textContent = defaultText;
                    select.appendChild(defaultOption);
                    
                    kelasOptions.forEach(kelas => {
                        const option = document.createElement('option');
                        option.value = kelas;
                        option.textContent = kelas;
                        select.appendChild(option);
                    });
                }
            });
        }

        // Set tanggal hari ini dan load data
        document.addEventListener('DOMContentLoaded', async function() {
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('tanggalPresensi').value = today;
            document.getElementById('filterTanggal').value = today;
            document.getElementById('filterTanggalJurnal').value = today;
            
            console.log('Initializing application...');
            await initializeDatabase();
            
            // Populate kelas dropdowns
            populateKelasDropdowns();
            
            const savedUser = localStorage.getItem('currentUser');
            if (savedUser) {
                currentUser = JSON.parse(savedUser);
                document.getElementById('loginPage').classList.add('hidden');
                document.getElementById('dashboard').classList.remove('hidden');
                
                let userInfoText = `Selamat datang, ${currentUser.nama_lengkap} (${currentUser.role})`;
                if (currentUser.mapel && currentUser.role === 'teacher') {
                    userInfoText += ` - ${currentUser.mapel}`;
                }
                
                document.getElementById('userInfo').textContent = userInfoText;
                updateMenuVisibility();
                
                await loadAllData();
                await loadMapelOptions();
            } else {
                await loadAllData();
                await loadMapelOptions();
            }
            
            showAlert('Aplikasi berhasil terhubung ke database.', 'success');
        });

        // Login Function
        document.getElementById('loginForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;
            
            try {
                const user = await authenticateUser(username, password);
                
                if (user) {
                    currentUser = user;
                    localStorage.setItem('currentUser', JSON.stringify(user));
                    
                    document.getElementById('loginPage').classList.add('hidden');
                    document.getElementById('dashboard').classList.remove('hidden');
                    
                    let userInfoText = `Selamat datang, ${user.nama_lengkap} (${user.role})`;
                    if (user.mapel && user.role === 'teacher') {
                        userInfoText += ` - ${user.mapel}`;
                    }
                    document.getElementById('userInfo').textContent = userInfoText;
                    
                    updateMenuVisibility();
                    
                    showAlert('Login berhasil!', 'success');
                    await loadAllData();
                } else {
                    showAlert('Username atau password salah!', 'error');
                }
            } catch (error) {
                console.error('Login error:', error);
                showAlert('Terjadi kesalahan saat login!', 'error');
            }
        });

        function logout() {
            currentUser = null;
            localStorage.removeItem('currentUser');
            document.getElementById('dashboard').classList.add('hidden');
            document.getElementById('loginPage').classList.remove('hidden');
            document.getElementById('username').value = '';
            document.getElementById('password').value = '';
            document.getElementById('userInfo').textContent = '';
        }

        function updateMenuVisibility() {
            const menuManajemenSiswa = document.getElementById('menuManajemenSiswa');
            
            if (currentUser && currentUser.role === 'teacher') {
                menuManajemenSiswa.style.display = 'none';
            } else {
                menuManajemenSiswa.style.display = 'block';
            }
        }

        function showPage(pageId) {
            const pages = ['mainMenu', 'manajemenSiswa', 'inputPresensi', 'rekapPresensi', 'rekapJurnal'];
            pages.forEach(page => {
                document.getElementById(page).classList.add('hidden');
            });
            
            document.getElementById(pageId).classList.remove('hidden');
            document.getElementById(pageId).classList.add('fade-in');
            
            if (pageId === 'manajemenSiswa') {
                
            }
        }

        function showAlert(message, type = 'info') {
            const alertDiv = document.createElement('div');
            alertDiv.className = `fixed top-4 right-4 z-50 px-6 py-4 rounded-lg text-white font-semibold slide-up ${
                type === 'success' ? 'bg-green-500' : 
                type === 'error' ? 'bg-red-500' : 'bg-blue-500'
            }`;
            alertDiv.textContent = message;
            document.body.appendChild(alertDiv);
            
            setTimeout(() => {
                alertDiv.remove();
            }, 3000);
        }

        // Manajemen Siswa Functions
        document.getElementById('formTambahSiswa').addEventListener('submit', async function(e) {
            e.preventDefault();
            const nama = document.getElementById('namaSiswa').value;
            const nis = document.getElementById('nisSiswa').value;
            const jenisKelamin = document.getElementById('jenisKelaminSiswa').value;
            const kelas = document.getElementById('kelasSiswa').value;
            
            try {
                const siswa = {
                    nama: nama,
                    nis: nis,
                    jenis_kelamin: jenisKelamin,
                    kelas: kelas
                };
                
                const savedSiswa = await saveSiswa(siswa);
                siswaData.push(savedSiswa);
                
                showAlert('Data berhasil disimpan!', 'success');
                document.getElementById('formTambahSiswa').reset();
                loadDaftarSiswa();
            } catch (error) {
                showAlert('Gagal menyimpan data!', 'error');
            }
        });

        async function loadDaftarSiswa() {
            const tbody = document.getElementById('daftarSiswa');
            tbody.innerHTML = '';
            
            const filterKelas = document.getElementById('filterKelasDaftar').value;
            
            let filteredSiswa = siswaData;
            
            if (filterKelas) {
                filteredSiswa = filteredSiswa.filter(s => s.kelas === filterKelas);
            }
            
            filteredSiswa.forEach((siswa, index) => {
                const row = document.createElement('tr');
                row.className = 'border-b hover:bg-gray-50';
                row.innerHTML = `
                    <td class="px-4 py-2">${index + 1}</td>
                    <td class="px-4 py-2">${siswa.nama}</td>
                    <td class="px-4 py-2">${siswa.nis || '-'}</td>
                    <td class="px-4 py-2">${siswa.jenis_kelamin === 'L' ? 'Laki-laki' : siswa.jenis_kelamin === 'P' ? 'Perempuan' : '-'}</td>
                    <td class="px-4 py-2">${siswa.kelas}</td>
                    <td class="px-4 py-2">
                        <button onclick="editSiswa(${siswa.id})" class="bg-yellow-500 hover:bg-yellow-600 text-white px-3 py-1 rounded text-sm mr-2">Edit</button>
                        <button onclick="hapusSiswa(${siswa.id})" class="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded text-sm">Hapus</button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        function editSiswa(id) {
            const siswa = siswaData.find(s => s.id === id);
            if (siswa) {
                document.getElementById('editSiswaId').value = siswa.id;
                document.getElementById('editNamaSiswa').value = siswa.nama;
                document.getElementById('editNisSiswa').value = siswa.nis || '';
                document.getElementById('editJenisKelaminSiswa').value = siswa.jenis_kelamin || '';
                document.getElementById('editKelasSiswa').value = siswa.kelas;
                document.getElementById('modalEditSiswa').classList.remove('hidden');
            }
        }

        document.getElementById('formEditSiswa').addEventListener('submit', async function(e) {
            e.preventDefault();
            const id = parseInt(document.getElementById('editSiswaId').value);
            const nama = document.getElementById('editNamaSiswa').value;
            const nis = document.getElementById('editNisSiswa').value;
            const jenisKelamin = document.getElementById('editJenisKelaminSiswa').value;
            const kelas = document.getElementById('editKelasSiswa').value;
            
            try {
                const siswaUpdate = { 
                    nama, 
                    nis,
                    jenis_kelamin: jenisKelamin,
                    kelas
                };
                await updateSiswa(id, siswaUpdate);
                
                const index = siswaData.findIndex(s => s.id === id);
                if (index !== -1) {
                    Object.assign(siswaData[index], siswaUpdate);
                }
                
                showAlert('Data berhasil diperbarui!', 'success');
                closeModal();
                loadDaftarSiswa();
            } catch (error) {
                showAlert('Gagal memperbarui data!', 'error');
            }
        });

        function hapusSiswa(id) {
            showConfirmModal('Apakah Anda yakin ingin menghapus siswa ini?', async () => {
                try {
                    await deleteSiswa(id);
                    siswaData = siswaData.filter(s => s.id !== id);
                    showAlert('Data berhasil dihapus!', 'success');
                    loadDaftarSiswa();
                } catch (error) {
                    showAlert('Gagal menghapus data!', 'error');
                }
            });
        }

        async function importCSV() {
            const fileInput = document.getElementById('csvFile');
            const file = fileInput.files[0];
            
            if (!file) {
                showAlert('Pilih file CSV terlebih dahulu!', 'error');
                return;
            }
            
            const reader = new FileReader();
            reader.onload = async function(e) {
                const csv = e.target.result;
                const lines = csv.split('\n');
                let imported = 0;
                
                try {
                    for (let i = 1; i < lines.length; i++) {
                        const line = lines[i].trim();
                        if (line) {
                            const [nama, nis, jenisKelamin, kelas] = line.split(',');
                            if (nama && nis && jenisKelamin && kelas) {
                                const siswa = {
                                    nama: nama.trim(),
                                    nis: nis.trim(),
                                    jenis_kelamin: jenisKelamin.trim(),
                                    kelas: kelas.trim()
                                };
                                const savedSiswa = await saveSiswa(siswa);
                                siswaData.push(savedSiswa);
                                imported++;
                            }
                        }
                    }
                    
                    showAlert(`${imported} siswa berhasil diimport!`, 'success');
                    loadDaftarSiswa();
                    fileInput.value = '';
                } catch (error) {
                    showAlert('Gagal mengimport data!', 'error');
                }
            };
            reader.readAsText(file);
        }

        // Input Presensi Functions
        function loadPresensi() {
            const kelas = document.getElementById('filterKelas').value;
            const mapelId = document.getElementById('filterMapelPresensi').value;
            const tanggal = document.getElementById('tanggalPresensi').value;
            
            if (!kelas || !mapelId || !tanggal) {
                showAlert('Pilih kelas, mata pelajaran, dan tanggal terlebih dahulu!', 'error');
                return;
            }
            
            const mapelObj = mapelData.find(m => m.id == mapelId);
            const mapelName = mapelObj ? mapelObj.nama_mapel : '';
            
            const siswaKelas = siswaData.filter(s => s.kelas === kelas);
            const container = document.getElementById('daftarPresensi');
            container.innerHTML = '';
            
            siswaKelas.forEach((siswa, index) => {
                const existingPresensi = presensiData.find(p => 
                    p.siswa_id === siswa.id && p.tanggal === tanggal && p.mapel_id == mapelId && p.guru_id == currentUser.id
                );
                
                const row = document.createElement('tr');
                row.className = 'border-b hover:bg-gray-50';
                row.innerHTML = `
                    <td class="px-4 py-2">${index + 1}</td>
                    <td class="px-4 py-2 font-medium">${siswa.nama}</td>
                    <td class="px-4 py-2">${siswa.nis || '-'}</td>
                    <td class="px-4 py-2">${siswa.kelas}</td>
                    <td class="px-4 py-2">${mapelName}</td>
                    <td class="px-4 py-2">
                        <select class="px-3 py-1 border rounded focus:ring-2 focus:ring-blue-500" 
                                onchange="updatePresensi(${siswa.id}, '${tanggal}', ${mapelId}, this.value)">
                            <option value="Hadir" ${existingPresensi?.status === 'Hadir' ? 'selected' : ''}>Hadir</option>
                            <option value="Ijin" ${existingPresensi?.status === 'Ijin' ? 'selected' : ''}>Ijin</option>
                            <option value="Sakit" ${existingPresensi?.status === 'Sakit' ? 'selected' : ''}>Sakit</option>
                            <option value="Alpha" ${existingPresensi?.status === 'Alpha' || !existingPresensi ? 'selected' : ''}>Alpha</option>
                            <option value="Dispen" ${existingPresensi?.status === 'Dispen' ? 'selected' : ''}>Dispen</option>
                        </select>
                    </td>
                `;
                container.appendChild(row);
            });
            
            updateJurnalStats();
        }

        function updatePresensi(siswaId, tanggal, mapelId, status) {
            const existingIndex = presensiData.findIndex(p => 
                p.siswa_id === siswaId && 
                p.tanggal === tanggal && 
                p.mapel_id == mapelId && 
                p.guru_id == currentUser.id
            );
            
            if (existingIndex !== -1) {
                presensiData[existingIndex].status = status;
            } else {
                presensiData.push({
                    siswa_id: siswaId,
                    tanggal: tanggal,
                    mapel_id: parseInt(mapelId),
                    guru_id: currentUser.id,
                    status: status,
                    kelas: document.getElementById('filterKelas').value
                });
            }
            
            updateJurnalStats();
        }

        async function saveAllPresensi() {
            const kelas = document.getElementById('filterKelas').value;
            const mapelId = document.getElementById('filterMapelPresensi').value;
            const tanggal = document.getElementById('tanggalPresensi').value;
            
            if (!kelas || !mapelId || !tanggal) {
                showAlert('Pilih kelas, mata pelajaran, dan tanggal terlebih dahulu!', 'error');
                return;
            }
            
            if (!currentUser || !currentUser.id) {
                showAlert('Sesi login tidak valid. Silakan login ulang!', 'error');
                return;
            }
            
            try {
                const siswaKelas = siswaData.filter(s => s.kelas === kelas);
                
                if (siswaKelas.length === 0) {
                    showAlert('Tidak ada siswa di kelas yang dipilih!', 'error');
                    return;
                }
                
                let savedCount = 0;
                let errorCount = 0;
                
                const presensiSelects = document.querySelectorAll('#daftarPresensi select');
                const presensiToSave = [];
                
                siswaKelas.forEach((siswa, index) => {
                    const selectElement = presensiSelects[index];
                    if (selectElement) {
                        const status = selectElement.value;
                        presensiToSave.push({
                            siswa_id: siswa.id,
                            tanggal: tanggal,
                            mapel_id: parseInt(mapelId),
                            guru_id: currentUser.id,
                            status: status,
                            kelas: kelas
                        });
                    }
                });
                
                console.log('Saving presensi data:', presensiToSave);
                
                for (const presensiRecord of presensiToSave) {
                    try {
                        await savePresensi(presensiRecord);
                        savedCount++;
                    } catch (error) {
                        console.error('Error saving individual presensi:', error);
                        errorCount++;
                    }
                }
                
                if (savedCount > 0) {
                    showAlert(`${savedCount} presensi berhasil disimpan!`, 'success');
                    await loadAllData();
                } else {
                    showAlert('Tidak ada presensi yang berhasil disimpan!', 'error');
                }
                
                if (errorCount > 0) {
                    showAlert(`${errorCount} presensi gagal disimpan!`, 'error');
                }
                
            } catch (error) {
                console.error('Error in saveAllPresensi:', error);
                showAlert(`Gagal menyimpan presensi: ${error.message}`, 'error');
            }
        }

        function setSemuaHadir() {
            const kelas = document.getElementById('filterKelas').value;
            const mapelId = document.getElementById('filterMapelPresensi').value;
            const tanggal = document.getElementById('tanggalPresensi').value;
            
            if (!kelas || !mapelId || !tanggal) {
                showAlert('Pilih kelas, mata pelajaran, dan tanggal terlebih dahulu!', 'error');
                return;
            }
            
            const siswaKelas = siswaData.filter(s => s.kelas === kelas);
            
            siswaKelas.forEach(siswa => {
                updatePresensi(siswa.id, tanggal, mapelId, 'Hadir');
            });
            
            loadPresensi();
            showAlert('Semua siswa telah diset hadir!', 'success');
        }

        function updateJurnalStats() {
            const kelas = document.getElementById('filterKelas').value;
            const mapelId = document.getElementById('filterMapelPresensi').value;
            const tanggal = document.getElementById('tanggalPresensi').value;
            
            if (!kelas || !mapelId || !tanggal) return;
            
            const siswaKelas = siswaData.filter(s => s.kelas === kelas);
            const presensiHariIni = presensiData.filter(p => 
                p.tanggal === tanggal && p.mapel_id == mapelId && p.guru_id == currentUser.id
            );
            
            let hadir = 0;
            let tidakHadir = 0;
            let namaTidakHadir = [];
            
            siswaKelas.forEach(siswa => {
                const presensi = presensiHariIni.find(p => p.siswa_id === siswa.id);
                if (presensi && presensi.status === 'Hadir') {
                    hadir++;
                } else {
                    tidakHadir++;
                    const status = presensi ? presensi.status : 'Alpha';
                    namaTidakHadir.push(`${siswa.nama} (${status})`);
                }
            });
            
            document.getElementById('jumlahHadir').value = hadir;
            document.getElementById('jumlahTidakHadir').value = tidakHadir;
            document.getElementById('namaTidakHadir').value = namaTidakHadir.join(', ');
            
            document.getElementById('namaMapel').value = mapelId;
        }

        // Jurnal Functions
        document.getElementById('formJurnal').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            if (!currentUser || !currentUser.id) {
                showAlert('Sesi login tidak valid. Silakan login ulang!', 'error');
                return;
            }
            
            const tanggal = document.getElementById('tanggalPresensi').value;
            const kelas = document.getElementById('filterKelas').value;
            const mapelId = document.getElementById('namaMapel').value;
            const jamAwal = document.getElementById('jamAwal').value;
            const jamAkhir = document.getElementById('jamAkhir').value;
            const kegiatan = document.getElementById('kegiatan').value;
            const materi = document.getElementById('materi').value;
            
            if (!tanggal || !kelas || !mapelId || !jamAwal || !jamAkhir || !kegiatan || !materi) {
                showAlert('Semua field wajib harus diisi!', 'error');
                return;
            }
            
            try {
                const jurnal = {
                    tanggal: tanggal,
                    kelas: kelas,
                    mapel_id: parseInt(mapelId),
                    jam_awal: parseInt(jamAwal),
                    jam_akhir: parseInt(jamAkhir),
                    jumlah_hadir: parseInt(document.getElementById('jumlahHadir').value) || 0,
                    jumlah_tidak_hadir: parseInt(document.getElementById('jumlahTidakHadir').value) || 0,
                    nama_tidak_hadir: document.getElementById('namaTidakHadir').value || '',
                    kegiatan: kegiatan,
                    materi: materi,
                    keterangan: document.getElementById('keterangan').value || '',
                    guru_id: currentUser.id
                };
                
                console.log('Saving jurnal data:', jurnal);
                
                const savedJurnal = await saveJurnal(jurnal);
                jurnalData.push(savedJurnal);
                
                showAlert('Jurnal berhasil disimpan!', 'success');
                document.getElementById('formJurnal').reset();
                
                document.getElementById('jumlahHadir').value = '';
                document.getElementById('jumlahTidakHadir').value = '';
                document.getElementById('namaTidakHadir').value = '';
                
            } catch (error) {
                console.error('Error saving jurnal:', error);
                showAlert(`Gagal menyimpan jurnal: ${error.message}`, 'error');
            }
        });

        // Rekap Functions
        function rekapHarian() {
            const kelas = document.getElementById('filterKelasRekap').value;
            const tanggal = document.getElementById('filterTanggal').value;
            
            if (!tanggal) {
                showAlert('Pilih tanggal terlebih dahulu!', 'error');
                return;
            }
            
            let presensiHariIni = presensiData.filter(p => 
                p.tanggal === tanggal && 
                p.guru_id == currentUser.id
            );
            
            if (kelas) {
                presensiHariIni = presensiHariIni.filter(p => p.kelas === kelas);
            }
            
            let html = `
                <h3 class="text-lg font-semibold mb-4">Rekap Harian - ${tanggal}</h3>
                <p class="text-sm text-gray-600 mb-4">Menampilkan presensi untuk mata pelajaran yang Anda ajar</p>
                <div class="overflow-x-auto">
                    <table class="w-full table-auto">
                        <thead>
                            <tr class="bg-gray-50">
                                <th class="px-4 py-2 text-left">No</th>
                                <th class="px-4 py-2 text-left">Nama</th>
                                <th class="px-4 py-2 text-left">NIS</th>
                                <th class="px-4 py-2 text-left">Kelas</th>
                                <th class="px-4 py-2 text-left">Mata Pelajaran</th>
                                <th class="px-4 py-2 text-left">Status</th>
                            </tr>
                        </thead>
                        <tbody>
            `;
            
            if (presensiHariIni.length === 0) {
                html += `
                    <tr>
                        <td colspan="6" class="px-4 py-8 text-center text-gray-500">
                            Tidak ada data presensi untuk tanggal ${tanggal}
                        </td>
                    </tr>
                `;
            } else {
                presensiHariIni.forEach((presensi, index) => {
                    const siswa = siswaData.find(s => s.id === presensi.siswa_id);
                    if (!siswa) return;
                    
                    let mapelName = '-';
                    if (presensi.mapel_id) {
                        const mapelObj = mapelData.find(m => m.id == presensi.mapel_id);
                        mapelName = mapelObj ? mapelObj.nama_mapel : '-';
                    }
                    
                    const statusColor = presensi.status === 'Hadir' ? 'text-green-600 font-semibold' : 'text-red-600 font-semibold';
                    
                    html += `
                        <tr class="border-b">
                            <td class="px-4 py-2">${index + 1}</td>
                            <td class="px-4 py-2">${siswa.nama}</td>
                            <td class="px-4 py-2">${siswa.nis || '-'}</td>
                            <td class="px-4 py-2">${presensi.kelas}</td>
                            <td class="px-4 py-2">${mapelName}</td>
                            <td class="px-4 py-2 ${statusColor}">${presensi.status}</td>
                        </tr>
                    `;
                });
            }
            
            html += '</tbody></table></div>';
            document.getElementById('hasilRekap').innerHTML = html;
        }

        function rekapSemuaWaktu() {
            const kelas = document.getElementById('filterKelasRekap').value;
            
            const presensiGuru = presensiData.filter(p => p.guru_id == currentUser.id);
            
            const siswaIds = [...new Set(presensiGuru.map(p => p.siswa_id))];
            let siswaFilter = siswaData.filter(s => siswaIds.includes(s.id));
            
            if (kelas) {
                siswaFilter = siswaFilter.filter(s => s.kelas === kelas);
            }
            
            let html = `
                <h3 class="text-lg font-semibold mb-4">Rekap Semua Waktu</h3>
                <p class="text-sm text-gray-600 mb-4">Menampilkan rekap presensi untuk mata pelajaran yang Anda ajar</p>
                <div class="overflow-x-auto">
                    <table class="w-full table-auto">
                        <thead>
                            <tr class="bg-gray-50">
                                <th class="px-4 py-2 text-left">No</th>
                                <th class="px-4 py-2 text-left">Nama</th>
                                <th class="px-4 py-2 text-left">NIS</th>
                                <th class="px-4 py-2 text-left">Kelas</th>
                                <th class="px-4 py-2 text-left">Hadir</th>
                                <th class="px-4 py-2 text-left">Sakit</th>
                                <th class="px-4 py-2 text-left">Ijin</th>
                                <th class="px-4 py-2 text-left">Alpha</th>
                                <th class="px-4 py-2 text-left">Dispen</th>
                                <th class="px-4 py-2 text-left">Total</th>
                                <th class="px-4 py-2 text-left">Persentase</th>
                            </tr>
                        </thead>
                        <tbody>
            `;
            
            if (siswaFilter.length === 0) {
                html += `
                    <tr>
                        <td colspan="11" class="px-4 py-8 text-center text-gray-500">
                            Tidak ada data presensi untuk mata pelajaran yang Anda ajar
                        </td>
                    </tr>
                `;
            } else {
                siswaFilter.forEach((siswa, index) => {
                    const presensiSiswa = presensiGuru.filter(p => p.siswa_id === siswa.id);
                    
                    const hadir = presensiSiswa.filter(p => p.status === 'Hadir').length;
                    const sakit = presensiSiswa.filter(p => p.status === 'Sakit').length;
                    const ijin = presensiSiswa.filter(p => p.status === 'Ijin').length;
                    const alpha = presensiSiswa.filter(p => p.status === 'Alpha').length;
                    const dispen = presensiSiswa.filter(p => p.status === 'Dispen').length;
                    
                    const total = presensiSiswa.length;
                    const persentase = total > 0 ? (((hadir + dispen) / total) * 100).toFixed(1) : 0;
                    
                    html += `
                        <tr class="border-b">
                            <td class="px-4 py-2">${index + 1}</td>
                            <td class="px-4 py-2">${siswa.nama}</td>
                            <td class="px-4 py-2">${siswa.nis || '-'}</td>
                            <td class="px-4 py-2">${siswa.kelas}</td>
                            <td class="px-4 py-2 text-green-600">${hadir}</td>
                            <td class="px-4 py-2 text-yellow-600">${sakit}</td>
                            <td class="px-4 py-2 text-blue-600">${ijin}</td>
                            <td class="px-4 py-2 text-red-600">${alpha}</td>
                            <td class="px-4 py-2 text-purple-600">${dispen}</td>
                            <td class="px-4 py-2 font-semibold">${total}</td>
                            <td class="px-4 py-2 font-semibold">${persentase}%</td>
                        </tr>
                    `;
                });
            }
            
            html += '</tbody></table></div>';
            document.getElementById('hasilRekap').innerHTML = html;
        }

        function loadJurnal() {
            const tanggal = document.getElementById('filterTanggalJurnal').value;
            const kelas = document.getElementById('filterKelasJurnal').value;
            const mapelId = document.getElementById('filterMapelJurnal').value;
            
            let jurnalFilter = jurnalData;
            if (tanggal) {
                jurnalFilter = jurnalFilter.filter(j => j.tanggal === tanggal);
            }
            if (kelas) {
                jurnalFilter = jurnalFilter.filter(j => j.kelas === kelas);
            }
            if (mapelId) {
                jurnalFilter = jurnalFilter.filter(j => j.mapel_id == mapelId);
            }
            
            const tbody = document.getElementById('daftarJurnal');
            tbody.innerHTML = '';
            
            jurnalFilter.forEach((jurnal, index) => {
                let mapelName = '-';
                if (jurnal.mapel_id) {
                    const mapelObj = mapelData.find(m => m.id == jurnal.mapel_id);
                    mapelName = mapelObj ? mapelObj.nama_mapel : '-';
                }
                
                const row = document.createElement('tr');
                row.className = 'border-b hover:bg-gray-50';
                row.innerHTML = `
                    <td class="px-4 py-2">${index + 1}</td>
                    <td class="px-4 py-2">${mapelName}</td>
                    <td class="px-4 py-2">${jurnal.kelas}</td>
                    <td class="px-4 py-2">${jurnal.tanggal}</td>
                    <td class="px-4 py-2">${jurnal.jam_awal}</td>
                    <td class="px-4 py-2">${jurnal.jam_akhir}</td>
                    <td class="px-4 py-2 text-green-600">${jurnal.jumlah_hadir}</td>
                    <td class="px-4 py-2 text-red-600">${jurnal.jumlah_tidak_hadir}</td>
                    <td class="px-4 py-2 text-sm">${jurnal.nama_tidak_hadir || '-'}</td>
                    <td class="px-4 py-2 text-sm">${jurnal.kegiatan}</td>
                    <td class="px-4 py-2 text-sm">${jurnal.materi}</td>
                    <td class="px-4 py-2 text-sm">${jurnal.keterangan || '-'}</td>
                    <td class="px-4 py-2">
                        <button onclick="editJurnal(${jurnal.id})" class="bg-yellow-500 hover:bg-yellow-600 text-white px-3 py-1 rounded text-sm mr-2">Edit</button>
                        <button onclick="hapusJurnal(${jurnal.id})" class="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded text-sm">Hapus</button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        function editJurnal(id) {
            const jurnal = jurnalData.find(j => j.id === id);
            if (jurnal) {
                document.getElementById('editJurnalId').value = jurnal.id;
                document.getElementById('editNamaMapel').value = jurnal.mapel_id;
                document.getElementById('editKelasJurnal').value = jurnal.kelas;
                document.getElementById('editJamAwal').value = jurnal.jam_awal;
                document.getElementById('editJamAkhir').value = jurnal.jam_akhir;
                document.getElementById('editJumlahHadir').value = jurnal.jumlah_hadir;
                document.getElementById('editJumlahTidakHadir').value = jurnal.jumlah_tidak_hadir;
                document.getElementById('editNamaTidakHadir').value = jurnal.nama_tidak_hadir || '';
                document.getElementById('editKegiatan').value = jurnal.kegiatan;
                document.getElementById('editMateri').value = jurnal.materi;
                document.getElementById('editKeterangan').value = jurnal.keterangan || '';
                document.getElementById('modalEditJurnal').classList.remove('hidden');
            }
        }

        document.getElementById('formEditJurnal').addEventListener('submit', async function(e) {
            e.preventDefault();
            const id = parseInt(document.getElementById('editJurnalId').value);
            const mapelId = document.getElementById('editNamaMapel').value;
            const kelas = document.getElementById('editKelasJurnal').value;
            const jamAwal = document.getElementById('editJamAwal').value;
            const jamAkhir = document.getElementById('editJamAkhir').value;
            const jumlahHadir = document.getElementById('editJumlahHadir').value;
            const jumlahTidakHadir = document.getElementById('editJumlahTidakHadir').value;
            const namaTidakHadir = document.getElementById('editNamaTidakHadir').value;
            const kegiatan = document.getElementById('editKegiatan').value;
            const materi = document.getElementById('editMateri').value;
            const keterangan = document.getElementById('editKeterangan').value;
            
            try {
                const jurnalUpdate = {
                    mapel_id: parseInt(mapelId),
                    kelas: kelas,
                    jam_awal: parseInt(jamAwal),
                    jam_akhir: parseInt(jamAkhir),
                    jumlah_hadir: parseInt(jumlahHadir),
                    jumlah_tidak_hadir: parseInt(jumlahTidakHadir),
                    nama_tidak_hadir: namaTidakHadir,
                    kegiatan: kegiatan,
                    materi: materi,
                    keterangan: keterangan
                };
                
                await updateJurnal(id, jurnalUpdate);
                
                const index = jurnalData.findIndex(j => j.id === id);
                if (index !== -1) {
                    Object.assign(jurnalData[index], jurnalUpdate);
                }
                
                showAlert('Jurnal berhasil diperbarui!', 'success');
                closeModal();
                loadJurnal();
            } catch (error) {
                showAlert('Gagal memperbarui jurnal!', 'error');
            }
        });

        function hapusJurnal(id) {
            showConfirmModal('Apakah Anda yakin ingin menghapus jurnal ini?', async () => {
                try {
                    await deleteJurnal(id);
                    jurnalData = jurnalData.filter(j => j.id !== id);
                    showAlert('Jurnal berhasil dihapus!', 'success');
                    loadJurnal();
                } catch (error) {
                    showAlert('Gagal menghapus jurnal!', 'error');
                }
            });
        }

        function downloadJurnalPDF() {
            const tanggal = document.getElementById('filterTanggalJurnal').value;
            const kelas = document.getElementById('filterKelasJurnal').value;
            const mapelId = document.getElementById('filterMapelJurnal').value;
            
            let jurnalFilter = jurnalData;
            if (tanggal) {
                jurnalFilter = jurnalFilter.filter(j => j.tanggal === tanggal);
            }
            if (kelas) {
                jurnalFilter = jurnalFilter.filter(j => j.kelas === kelas);
            }
            if (mapelId) {
                jurnalFilter = jurnalFilter.filter(j => j.mapel_id == mapelId);
            }
            
            if (jurnalFilter.length === 0) {
                showAlert('Tidak ada data jurnal untuk diunduh!', 'error');
                return;
            }
            
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();
            
            doc.setFontSize(16);
            doc.text('Rekap Jurnal Mengajar', 20, 20);
            
            const tableData = jurnalFilter.map((jurnal, index) => {
                let mapelName = '-';
                if (jurnal.mapel_id) {
                    const mapelObj = mapelData.find(m => m.id == jurnal.mapel_id);
                    mapelName = mapelObj ? mapelObj.nama_mapel : '-';
                }
                
                return [
                    index + 1,
                    mapelName,
                    jurnal.kelas,
                    jurnal.tanggal,
                    `${jurnal.jam_awal}-${jurnal.jam_akhir}`,
                    jurnal.jumlah_hadir,
                    jurnal.jumlah_tidak_hadir,
                    jurnal.kegiatan,
                    jurnal.materi
                ];
            });
            
            doc.autoTable({
                head: [['No', 'Mapel', 'Kelas', 'Tanggal', 'Jam', 'Hadir', 'Tidak Hadir', 'Kegiatan', 'Materi']],
                body: tableData,
                startY: 30,
                styles: { fontSize: 8 },
                headStyles: { fillColor: [66, 139, 202] }
            });
            
            doc.save('jurnal-mengajar.pdf');
        }

        // Modal Functions
        function showConfirmModal(message, callback) {
            document.getElementById('pesanKonfirmasi').textContent = message;
            document.getElementById('modalKonfirmasi').classList.remove('hidden');
            document.getElementById('btnKonfirmasi').onclick = () => {
                callback();
                closeModal();
            };
        }

        function closeModal() {
            document.getElementById('modalKonfirmasi').classList.add('hidden');
            document.getElementById('modalEditSiswa').classList.add('hidden');
            document.getElementById('modalEditJurnal').classList.add('hidden');
        }
    </script>